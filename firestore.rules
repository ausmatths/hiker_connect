rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions for reuse
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidUser() {
      return request.auth.token.email_verified == true;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Trail collection rules
    match /trails/{trailId} {
      // Allow reading trails for verified users
      allow read: if isSignedIn() && isValidUser();

      // Enhanced trail creation rules
      allow create: if isSignedIn() &&
          isValidUser() &&
          request.resource.data.createdBy == request.auth.uid &&
          request.resource.data.keys().hasAll([
            'name',
            'difficulty',
            'location',
            'distance',
            'elevation'
          ]) &&
          request.resource.data.name is string &&
          request.resource.data.name.size() > 0;

      // Update rules with additional validation
      allow update: if isSignedIn() &&
          isValidUser() &&
          (resource.data.createdBy == request.auth.uid || isAdmin());

      // Deletion rules with admin override
      allow delete: if isSignedIn() &&
          (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // User profiles
    match /users/{userId} {
      // Read rules with validation
      allow read: if isSignedIn() &&
          (isOwner(userId) || isAdmin());

      // Write rules with strict validation
      allow create: if isSignedIn() &&
          isOwner(userId) &&
          request.resource.data.keys().hasAll([
            'email',
            'displayName',
            'createdAt'
          ]) &&
          request.resource.data.email == request.auth.token.email;

      // Update rules with field restrictions
      allow update: if isSignedIn() &&
          isOwner(userId) &&
          request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly([
            'displayName',
            'bio',
            'interests',
            'phoneNumber',
            'location',
            'lastActive'
          ]);
    }

    // Events collection
    match /events/{eventId} {
      // Read rules for verified users
      allow read: if isSignedIn() && isValidUser();

      // Create events with validation
      allow create: if isSignedIn() &&
          isValidUser() &&
          request.resource.data.createdBy == request.auth.uid &&
          request.resource.data.keys().hasAll([
            'title',
            'description',
            'date',
            'location'
          ]);

      // Update and delete with creator or admin privileges
      allow update, delete: if isSignedIn() &&
          (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // Emergency contacts
    match /users/{userId}/emergencyContacts/{contactId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }
  }
}